import (
    "../../import/std.um"
    "lex.um"
    "ev.um"
)


type Parser* = struct {
    lexer: lex.Lexer
}


fn (p: ^Parser) parseAtom(): ^ev.Expr {
    p.lexer.next()
}


fn (p: ^Parser) parseList(): ^ev.Expr {
    p.lexer.eat(lex.tokLPar)
    
    e := ev.strExpr("nil")
    
    for p.lexer.tok.kind != lex.tokRPar && p.lexer.tok.kind != lex.tokNull {
        if p.lexer.tok.kind == lex.tokLPar {
            e1 := new(Expr)
            e1.car = p.parseList()
        } else {
            p.parseAtom()
        }
    }
    
    p.lexer.eat(lex.tokRPar)
}


fn (p: ^Parser) open*(name: str) {
    p.lexer.open(name)
    p.lexer.next()
    p.parseList()
}


fn (p: ^Parser) close*() {
    p.lexer.close()
}
