import (
    "lex.um"
    "ev.um"
)


type Parser* = struct {
    lexer: lex.Lexer
}


fn (p: ^Parser) parse(): ^ev.Expr { 
    res := ev.nilExpr()
    
    // Parse list
    if p.lexer.tok.kind == lex.tokLPar {
        res^ = ev.Expr{"", ev.nilExpr(), ev.nilExpr()}
        p.lexer.next() 
       
        for e := res; p.lexer.tok.kind == lex.tokAtom || p.lexer.tok.kind == lex.tokLPar {
            if e.car.atom == "nil" {
                e.car = p.parse()
            } else if e.cdr.atom == "nil" {
                e.cdr = p.parse()
            } else {
                tail := new(ev.Expr)
                tail^ = ev.Expr{"", e.cdr, p.parse()} 
                e.cdr = tail
                e = tail
            }
        }        
        p.lexer.eat(lex.tokRPar)
    
    // Parse atom
    } else {      
        p.lexer.check(lex.tokAtom)
        res.atom = p.lexer.tok.name
        p.lexer.next()
    }

    return res
}


fn (p: ^Parser) exec*(buf: str): str {
    p.lexer.open(buf)
    p.lexer.next()

    e := p.parse()
    
    printf("parse: %s; %s\n", ev.car(e).toStr(), ev.cdr(e).toStr())
      
    res := ev.evalquote(ev.car(e), ev.cdr(e))
    return res.toStr()
}

