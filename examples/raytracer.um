// Raytracer demo in Umka

import "../import/std.um"

type Vec = [3]real

fn (u: ^Vec) add(v: Vec): Vec         { return Vec{u[0] + v[0], u[1] + v[1], u[2] + v[2]} }
fn (u: ^Vec) sub(v: Vec): Vec         { return Vec{u[0] - v[0], u[1] - v[1], u[2] - v[2]} }
fn (u: ^Vec) dot(v: Vec): real        { return u[0]*v[0] + u[1]*v[1] + u[2]*v[2] }
fn (u: ^Vec) mul(a: real): Vec        { return Vec{u[0] * a, u[1] * a, u[2] * a} }
fn (u: ^Vec) elementwise(v: Vec): Vec { return Vec{u[0] * v[0], u[1] * v[1], u[2] * v[2]} }
fn norm(v: Vec): real                 { return sqrt(v.dot(v)) }
fn normalize(v: Vec): Vec             { return v.mul(1.0 / norm(v)) }
fn randn(): Vec                       { return Vec{std.frand() - 0.5, std.frand() - 0.5, std.frand() - 0.5} }

type Color = Vec

type Ray = struct {
    origin, dir: Vec
}

type GenericBody = struct {
    center:      Vec
    color:       Color
    diffuseness: real
    isLamp:      bool
}

fn (b: ^GenericBody) lambertFactor(lambert: real): real {
    return 1.0 - (1.0 - lambert) * b.diffuseness
}

type Body = interface {
    get(): ^GenericBody
    intersect(ray: ^Ray, point, normal: ^Vec): bool
}

type Box = struct {
    body: GenericBody
    halfsize: Vec
}

fn (b: ^Box) get(): ^GenericBody { return &b.body }

fn within(x, y, xmin, ymin, xmax, ymax: real): bool {
    return (x > xmin) && (x < xmax) && (y > ymin) && (y < ymax)
}

fn (b: ^Box) intersectFace(ray: ^Ray, point, normal: ^Vec, i, j, k: int): bool {
    if fabs(ray.dir[k]) > 1e-9 {
        side := 1.0
        if ray.dir[k] > 0.0 {
            side = -1.0
        }

        if factor := (b.body.center[k] + side * b.halfsize[k] - ray.origin[k]) / ray.dir[k]; factor > 0.1 {
            point^ = ray.origin.add(ray.dir.mul(factor))
            if within(
                point[i], point[j],
                b.body.center[i] - b.halfsize[i], b.body.center[j] - b.halfsize[j],
                b.body.center[i] + b.halfsize[i], b.body.center[j] + b.halfsize[j]) {

                normal[i] = 0
                normal[j] = 0
                normal[k] = side
                return true
            }
        }
    }
    return false
}

fn (b: ^Box) intersect(ray: ^Ray, point, normal: ^Vec): bool {
    return b.intersectFace(ray, point, normal, 0, 1, 2) || 
           b.intersectFace(ray, point, normal, 2, 0, 1) || 
           b.intersectFace(ray, point, normal, 1, 2, 0)
}

type Sphere = struct {
    body: GenericBody
    radius: real
}

fn (s: ^Sphere) get(): ^GenericBody { return &s.body }

fn (s: ^Sphere) intersect(ray: ^Ray, point, normal: ^Vec): bool {
    displacement := s.body.center.sub(ray.origin)
    proj := displacement.dot(ray.dir)
    discr := s.radius * s.radius + proj * proj - displacement.dot(displacement)

    if discr > 0 {        
        if factor := proj - sqrt(discr); factor > 0.1 {
            point^ = ray.origin.add(ray.dir.mul(factor))
            normal^ = point.sub(s.body.center).mul(1.0 / s.radius)
            return true
        }
    }
    return false
}

type Scene = struct {
    ambientColor: Color
    body:         []Body
}

fn (sc: ^Scene) trace(ray: ^Ray, depth: int): Color {
    if depth > 3 {
        return sc.ambientColor
    }

    // Find nearest intersection
    bestDist := 1e9
    bestIndex := -1
    var bestPoint, bestNormal: Vec

    for i := 0; i < len(sc.body); i++ {
        var point, normal: Vec
        
        if found := sc.body[i].intersect(ray, &point, &normal); found {
            dist := norm(point.sub(ray.origin))
            if dist < bestDist {
                bestDist = dist
                bestIndex = i
                bestPoint = point
                bestNormal = normal
            }
        }
    }

    // Reflect rays
    if bestIndex >= 0 {
        bestBody := sc.body[bestIndex].get()

        if bestBody.isLamp {
            return bestBody.color
        }

        specularDir := ray.dir.sub(bestNormal.mul(2.0 * (ray.dir.dot(bestNormal))))
        diffuseDir := normalize(specularDir.add(randn().mul(2.0 * bestBody.diffuseness)))

        lambert := diffuseDir.dot(bestNormal)
        if lambert < 0 {
            diffuseDir = diffuseDir.sub(bestNormal.mul(2.0 * lambert))
            lambert = -lambert
        }

        diffuseRay := Ray{bestPoint, diffuseDir}

        return sc.trace(&diffuseRay, depth + 1).mul(bestBody.lambertFactor(lambert)).elementwise(bestBody.color)
    }

    return sc.ambientColor
}

const (width = 640; height = 480)

type RenderData = struct {
    startHeight:  int
    stopHeight:   int
    pos:          Vec
    azimuth:      real
    focal:        real
    antialiasing: real
    rays:         int
    scene:        ^Scene
    pixels:       ^[height][width][3] uint8
}

fn render(parent: ^fiber, buf: ^RenderData) {
    sinAz := sin(buf.azimuth); cosAz := cos(buf.azimuth)
    
    for i := buf.startHeight; i < buf.stopHeight; i++ {
        for j := 0; j < width; j++ {
            dir := Vec{j - width / 2, i - height / 2, buf.focal}

            rotDir := Vec{
                 dir[0]*cosAz + dir[2]*sinAz,
                 dir[1],
                -dir[0]*sinAz + dir[2]*cosAz}

            color := Color{0, 0, 0}

            for r := 0; r < buf.rays; r++ {
                randomDir := rotDir.add(randn().mul(buf.antialiasing))
                ray := Ray{buf.pos, normalize(randomDir)}
                color = color.add(buf.scene.trace(&ray, 0))
            }
            color = color.mul(255.0 / buf.rays)
            
            buf.pixels[i][j] = [3]uint8 {round(color[0]), round(color[1]), round(color[2])}
        }
        printf("%3d/%3d\n", i + 1, height)
        fibercall(parent)
    }
}

fn main() {
    // Define scene  
    body := [5]Body {
        &Box {
            body: GenericBody {
                center: Vec{500, -100, 1200},
                color: Color{0.4, 0.7, 1.0},
                diffuseness: 0.1,
                isLamp: false},
            halfsize: Vec{400 / 2.0, 600 / 2.0, 300 / 2.0}},
            
        &Box {
            body: GenericBody {
                center: Vec{550, 210, 1100},
                color: Color{0.9, 1.0, 0.6},
                diffuseness: 0.3,
                isLamp: false},
            halfsize: Vec{1000 / 2.0, 20 / 2.0, 1000 / 2.0}},            

        &Sphere {
            body: GenericBody{
                center: Vec{600, 0, 700},
                color: Color{1.0, 0.4, 0.6},
                diffuseness: 0.2,
                isLamp: false},
            radius: 200},
            
        &Sphere {
            body: GenericBody{
                center: Vec{330, 150, 700},
                color: Color{1.0, 1.0, 0.3},
                diffuseness: 0.15,
                isLamp: false},
            radius: 50},
            
        // Define light
        &Sphere {
            body: GenericBody{
                center: Vec{500, -1000, -700},
                color: Color{1.0, 1.0, 1.0},
                diffuseness: 1.0,
                isLamp: true},
            radius: 800}}
            
    scene := Scene{Color{0.2, 0.2, 0.2}, body}
    
    var pixels: [height][width][3]uint8            

    var rays, fibers: int
    printf("Raytracer demo\n")
    printf("Rays per pixel (recommended 1 to 20): ");  scanf("%lld", &rays)
    printf("Threads (recommended 1, 2, 4, 8, 16): ");  scanf("%lld", &fibers)
    
    // Define fibers
    renderer := make([]^fiber, fibers)
    renderData := make([]RenderData, fibers)

    for i := 0; i < len(renderer); i++ {
        // Define eye
        renderData[i] = RenderData {
            startHeight:  height / len(renderer) * i,
            stopHeight:   height / len(renderer) * (i + 1),
            pos:          Vec{0, 0, 0},
            azimuth:      30.0 * std.pi / 180.0,
            focal:        500,
            antialiasing: 1.0,
            rays:         rays,
            scene:        &scene,
            pixels:       &pixels}
        
        // Spawn fiber
        renderer[i] = fiberspawn(render, &renderData[i])
    }    

    // Render scene
    startTime := std.time()
    
    for true {
        working := false
        for i := 0; i < len(renderer); i++ {
            if fiberalive(renderer[i]) { 
                fibercall(renderer[i])
                working = true
            }
        }
        if !working {break}
    }    
        
    endTime := std.time()    
    printf("Rendering time = %d s\n", endTime - startTime)
    
    // Write output file
    const fileName = "scene.ppm"
    f := std.fopen(fileName, "wb")
    fprintf(f, "P6\n%d %d\n255\n", width, height)
    std.fwrite(f, &pixels)
    std.fclose(f)
    std.println("Done. See " + fileName)
    std.getchar()
    std.getchar()
}
