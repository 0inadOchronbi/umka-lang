import "../import/fnc.um"

type T = int

fn sqr(x: fnc.Any): fnc.Any {
    p := ^T(x)
    if p == null {return null}    
    return p^ * p^ 
}

fn under30(x: fnc.Any): bool {
    p := ^T(x)
    if p == null {return false}
    return p^ < 30 
}

fn sum(x, y: fnc.Any): fnc.Any {
    p := ^T(x)
    q := ^T(y)
    if p == null || q == null {return null}
    return p^ + q^   
}

fn main() {
    var data: fnc.AnyArray = [6]fnc.Any{3, 7, 1, -4, 2, 5}
    printf("%s\n", repr(data)) 
    
    result := data.map(sqr).filter(under30).reduce(sum) 
   
    printf("Sum of all squares under 30 = %s\n", repr(result))       
}