import "../import/fnc.um"

type T = int

fn sqr(x: fnc.Any): fnc.Any {
    p := ^T(x)
    if p == null {return null}    
    return p^ * p^ 
}

fn under30(x: fnc.Any): bool {
    p := ^T(x)
    if p == null {return false}
    return p^ < 30 
}

fn sum(x, y: fnc.Any): fnc.Any {
    p := ^T(x)
    q := ^T(y)
    if p == null || q == null {return null}
    return p^ + q^   
}

fn main() {
    var data: fnc.AnyArray = [6]fnc.Any{3, 7, 1, -4, 2, 5}
    
    for i := 0; i < len(data); i++ {
        p := ^T(data[i])
        printf("%d ", p^)
    }
    
    out := data.map(sqr).filter(under30).reduce(sum)

    p := ^T(out)
    printf("\nSum of all squares under 30 = %d\n", p^)       
}