fn sort(a: []interface{}, ordered: fn (x, y: interface{}): bool) {
    for sorted := false; !sorted {
        sorted = true
        for i := 0; i < len(a) - 1; i++ {
            if !ordered(a[i], a[i + 1]) {
                buf := a[i]
                a[i] = a[i + 1]
                a[i + 1] = buf
                sorted = false
            }
        }
    }
}

fn ordered(x, y: interface{}): bool {
    p := ^str(x)
    q := ^str(y)
    if p == null || q == null {error("Illegal type")}
    return p^ < q^            
}

fn main() {
    a := [10]str{"red", "green", "blue", "yellow", "gray", "brown", "black", "cyan", "magenta", "white"}
    
    b := make([]interface{}, len(a))
    for i := 0; i < len(b); i++ {
        b[i] = &a[i]
    }

    sort(b, ordered)
    
    for i := 0; i < len(b); i++ {        
        if p := ^str(b[i]); p != null {
            printf("{s}\n", p^)
        }
    }    
}