import (
    "conv.um"
    "strtype.um"
    "prnt.um" 
    "import/std.um"
)
    
const
    (
    p = 1
    q = 4
    )
    
fn f(a: [3] int16)

fn fr(a: ^[3] int16) {
    a[1] = 48
    for i := 0; i < 3; i++ {
        printf("{d} ", a[i])
    }
    printf("\n")
}

fn g(r: struct {x, y: int}): int {
    return r.x + r.y
}

type vec = struct {x, y: int}

fn h(i: int): vec {
    if i > 0 {
        return vec{x: 75, y: 86}
    } else {
        return vec{x: 15, y: 26}
    }
}        

var s: str = "Hello" + " World"

var a: [3] int16 = [3] int16{1, 4, 7}

fn main() {
    q := 7
    b := [3][2] real{[2]real{p,   2.5}, 
                     [2]real{3.5,   q},
                     [2]real{5.5, 6.5}}

    for i := 0; i < 3; i++ {
        for j := 0; j < 2; j++ {
            printf("{8.3f} ", b[i][j])
        }
    }
    printf("\n")
    
    type vec = struct {x, y, z: int}
    
    u := 42
    v := vec{x: u, y: u * 2, z: u * 3}
    printf("{d} {d} {d}\n", v.x, v.y, v.z)

    
    t := "Hallo"    
    t +=" Welt"
    
    const hi = "Hi"
    
    greater := "Hello" <= "Hello"
    printf("{d}\n", int(greater))
    
    prnt.print(s)
    prnt.printref(&s)
    prnt.print(t)
    prnt.print(hi + ", I'm glad to see you")
    prnt.print("Privet")
    printf("{s}\n", s)
    printf("{s}\n", "Salut")
    
    //scanf("{s}", &s)
    //print(s)
    printf("{c}\n", hi[1])
    printf("{c}\n", s[1])
    printf("{c}\n", t[1])
    
    f(a)
    printf("{d}\n", a[1])
    
    fr(&a)
    printf("{d}\n", a[1]) 

    var c: ^int16 = &a[2]
    printf("{d}\n", c^) 
    
    var r: struct {x, y: int}
    r.x = 2;  r.y = 3
    printf("{d}\n", g(r))
    
    w := h(-1).x
    printf("{d}\n", h(1).y)
    
    num := "2.356"
    val := 0.0
    sscanf(num, "{lf}", &val)
    printf("{8.3f}\n", val)
    
    var sss: str = "HHH"
    sprintf(sss, "The numbers are {d} and {d}\n", 3, 5)
    printf("{s}", sss)
    
    xx := 3.14
    ss := "Number is " + conv.ftoa(xx, 3) + " - ok."
    yy := conv.atof(conv.ftoa(xx, 3))
    printf("x = {.3f}  y = {.3f}  s = {s}\n", xx, yy, ss)
    
    printf("{d}", strtype.zz)
    
    type (
        point = ^pointrec
        pt = ^point
        
        pointrec = struct {
            x, y: int
            next: point
        }
    )
    
    qq := pointrec{x: 24, y: 25, next: point(0)}
    p := pointrec{x: 56, y: 57, next: &qq}
    
    prnt.print("\nnext is " + conv.ftoa(p.next.x, 0) + ", " + conv.ftoa(p.next.y, 0) + "\n")
    
    year := 1986
    
    dat := std.fopen("test.txt", "wb")
    std.fwrite(dat, &year, 8)
    
    year++
    std.fwrite(dat, &year, 8)
    std.fclose(dat)
    
    year2 := 0
    
    dat2 := std.fopen("test.txt", "rb")
    std.fseek(dat2, 8, std.seekBegin)
    std.fread(dat2, &year2, 8)
    std.fclose(dat2)
    
    std.remove("test.txt")
    
    printf("{d}\n", year2)
    
    std.println("First is " + std.itoa(std.atoi("2") + 2) + ", second is " + std.ftoa(sqrt(std.atof("2.56")), 3) + ".")
    
/*
    tt := ""
    var (i1, i2, i3: int; st: str)
    /*scanf("{s}", &st)
    printf("st = {s}\n", st)
    len1 := sscanf(st, "{d},{d},{d}", &i1, &i2, &i3)
    len2 := printf("i = {d},{d},{d}  {d} : OK\n", i1, i2, i3, 7)
    printf("len1 = {d}  len2 = {d}\n", len1, len2)

    scanf("{d} {d} {d}", &i1, &i2, &i3)
    printf("i = {d} {d} {d} : OK\n", i1, i2, i3) */ 
    
//    for i := 0; i < 10000000; i++ {
//        printf("i = {d} {d} {d} : OK\n", 10, 11, 12)
//    } 

    for i := 0; i < 10; i++ {
        std.println("Time = " + std.itoa(std.time()))
    }

    std.srand(std.time())
    for i := 0; i < 10; i++ {
        std.println("Random = " + std.itoa(std.rand()))
    }
      
}


fn f(a: [3] int16) {
    a[1] = 47
    for i := 0; i < 3; i++ {
        printf("{d} ", a[i])
    }
    printf("\n")
}

    