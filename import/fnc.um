// Umka functional programming tools

type (
    Any* = interface{}
    AnyArray* = []Any
)

fn (a: ^AnyArray) map*(f: fn (x: Any): Any): AnyArray {
    res := make(AnyArray, len(a^))
    for i := 0; i < len(a^); i++ {
        res[i] = f(a[i])
    }
    return res
}

fn (a: ^AnyArray) filter*(f: fn (x: Any): bool): AnyArray {
    res := make(AnyArray, 0)
    for i := 0; i < len(a^); i++ {
        if f(a[i]) {
            res = append(res, a[i])
        }
    }
    return res
}

fn (a: ^AnyArray) reduce*(f: fn (x, y: Any): Any): Any {
    res := a[0]
    for i := 1; i < len(a^); i++ {
        res = f(res, a[i])
    }
    return res
}
