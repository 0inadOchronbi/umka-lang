// Umka standard library

// File I/O

type file* = ^void

const (
    seekBegin* = 0
    seekCur*   = 1
    seekEnd*   = 2
)    

fn rtlfopen  (name: ^str, mode: ^str): file;  
fn fopen*    (name: str, mode: str): file {return rtlfopen(&name, &mode)}

fn rtlfclose (f: file): int
fn fclose*   (f: file): int {return rtlfclose(f)}

fn rtlfread  (buf: ^void, size, cnt: int, f: file): int
fn fread*    (f: file, buf: ^void, size: int): int {return rtlfread(buf, size, 1, f)}

fn rtlfwrite (buf: ^void, size, cnt: int, f: file): int
fn fwrite*   (f: file, buf: ^void, size: int): int {return rtlfwrite(buf, size, 1, f)}

fn rtlfseek  (f: file, offset, origin: int): int
fn fseek*    (f: file, offset, origin: int): int {return rtlfseek(f, offset, origin)}

fn rtlremove (name: ^str): int
fn remove*   (name: str): int {return rtlremove(&name)}

// I/O utilities

fn println*(s: str): int {return printf("{s}\n", s)}
fn fprintln*(f: file, s: str): int {return fprintf(f, "{s}\n", s)}

fn getchar*(): char {
    var c: char
    scanf("{c}", &c)
    return c
}

// Conversions

fn atoi*(s: str): int {
    var x: int
    sscanf(s, "{lld}", &x)
    return x
}

fn atof*(s: str): real {
    var x: real
    sscanf(s, "{lf}", &x)
    return x
}

fn itoa*(x: int): str {
    var s: str
    sprintf(s, "{lld}", x)
    return s
}

fn ftoa*(x: real, decimals: int): str {
    var fmt, s: str
    sprintf(fmt, "/{.{d}lf/}", decimals)
    sprintf(s, fmt, x)
    return s
}

// Math

const pi* = 3.14159265358979323846

// Random numbers

const randMax* = 0x7FFFFFFF
randSeed := 0

fn srand*(seed: int) {randSeed = seed}

fn rand*(): int {
    randSeed = ((randSeed * 1103515245) + 12345) & 0x7FFFFFFF
    return randSeed
}

fn frand*(): real {return real(rand()) / randMax}

// Timer

fn rtltime(): int
fn time*(): int {return rtltime()}
